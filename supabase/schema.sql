-- Create a table for public profiles
create table if not exists profiles (
  id uuid references auth.users on delete cascade not null primary key,
  updated_at timestamp with time zone,
  full_name text,
  avatar_url text,
  role text,
  address text,
  city text,
  state text,
  pincode text,
  mobile_number text
);

-- Set up Row Level Security (RLS) for profiles
alter table profiles enable row level security;

drop policy if exists "Public profiles are viewable by everyone." on profiles;
create policy "Public profiles are viewable by everyone." on profiles
  for select using (true);

drop policy if exists "Users can insert their own profile." on profiles;
create policy "Users can insert their own profile." on profiles
  for insert with check (auth.uid() = id);

drop policy if exists "Users can update own profile." on profiles;
create policy "Users can update own profile." on profiles
  for update using (auth.uid() = id);

-- This trigger automatically creates a profile for new users.
create or replace function public.handle_new_user()
returns trigger
language plpgsql
security definer set search_path = public
as $$
begin
  insert into public.profiles (id, role, full_name, avatar_url)
  values (new.id, new.raw_user_meta_data->>'role', new.raw_user_meta_data->>'full_name', new.raw_user_meta_data->>'avatar_url');
  return new;
end;
$$;

drop trigger if exists on_auth_user_created on auth.users;
create trigger on_auth_user_created
  after insert on auth.users
  for each row execute procedure public.handle_new_user();


-- Expenses Table
create table if not exists public.expenses (
    id bigint generated by default as identity primary key,
    user_id uuid references public.profiles not null,
    item_name text not null,
    amount numeric(10, 2) not null,
    expense_date date not null,
    created_at timestamp with time zone default timezone('utc'::text, now()) not null
);

-- Clean up old function if it exists
drop function if exists get_user_role(user_id uuid);

-- Set up Row Level Security for expenses
alter table public.expenses enable row level security;

-- Policy: Allow customers to manage their own expenses
-- We use a subquery on the profiles table to check the user's role.
drop policy if exists "Customers can manage their own expenses" on public.expenses;
create policy "Customers can manage their own expenses" on public.expenses
  for all using (
    auth.uid() = user_id and
    (select role from public.profiles where id = auth.uid()) = 'customer'
  );

-- Grant permissions to authenticated users
grant all on table public.expenses to authenticated;
grant all on table public.profiles to authenticated;
