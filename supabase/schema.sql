-- 1. PROFILES TABLE
-- Create a table for public profiles
CREATE TABLE IF NOT EXISTS public.profiles (
  id UUID NOT NULL PRIMARY KEY REFERENCES auth.users(id) ON DELETE CASCADE,
  updated_at TIMESTAMPTZ,
  full_name TEXT,
  avatar_url TEXT,
  role TEXT,
  address TEXT,
  city TEXT,
  state TEXT,
  country TEXT,
  pincode TEXT,
  mobile_number TEXT
);

-- Set up Row Level Security (RLS)
ALTER TABLE public.profiles ENABLE ROW LEVEL SECURITY;

-- Policies for profiles
DROP POLICY IF EXISTS "Individuals can create their own profile." ON public.profiles;
CREATE POLICY "Individuals can create their own profile." ON public.profiles FOR INSERT WITH CHECK (auth.uid() = id);

DROP POLICY IF EXISTS "Individuals can update their own profile." ON public.profiles;
CREATE POLICY "Individuals can update their own profile." ON public.profiles FOR UPDATE USING (auth.uid() = id);

DROP POLICY IF EXISTS "Individuals can view their own profile." ON public.profiles;
CREATE POLICY "Individuals can view their own profile." ON public.profiles FOR SELECT USING (auth.uid() = id);


-- 2. AUTOMATIC PROFILE CREATION
-- This trigger automatically creates a profile for new users.
CREATE OR REPLACE FUNCTION public.handle_new_user()
RETURNS TRIGGER AS $$
BEGIN
  INSERT INTO public.profiles (id, full_name, role, avatar_url)
  VALUES (
    new.id,
    new.raw_user_meta_data->>'full_name',
    new.raw_user_meta_data->>'role',
    new.raw_user_meta_data->>'avatar_url'
  );
  RETURN new;
END;
$$ LANGUAGE plpgsql SECURITY DEFINER SET search_path = public;

-- Trigger to execute the function after a new user is created
DROP TRIGGER IF EXISTS on_auth_user_created ON auth.users;
CREATE TRIGGER on_auth_user_created
AFTER INSERT ON auth.users
FOR EACH ROW EXECUTE FUNCTION public.handle_new_user();


-- 3. EXPENSES TABLE
-- Create the expenses table
CREATE TABLE IF NOT EXISTS public.expenses (
  id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  user_id UUID NOT NULL REFERENCES auth.users(id) ON DELETE CASCADE,
  item_name TEXT NOT NULL,
  amount NUMERIC(10, 2) NOT NULL,
  expense_date DATE NOT NULL,
  created_at TIMESTAMPTZ DEFAULT NOW()
);

-- Enable Row Level Security
ALTER TABLE public.expenses ENABLE ROW LEVEL SECURITY;

-- 4. HELPER FUNCTION FOR EXPENSES RLS
-- This function securely gets the role of the currently logged-in user.
CREATE OR REPLACE FUNCTION public.get_my_role()
RETURNS TEXT AS $$
BEGIN
  RETURN (SELECT raw_user_meta_data->>'role' FROM auth.users WHERE id = auth.uid());
END;
$$ LANGUAGE plpgsql SECURITY DEFINER SET search_path = public;

-- 5. RLS POLICY FOR EXPENSES
-- This policy ensures only customers can access their own expenses.
DROP POLICY IF EXISTS "Customers can manage their own expenses" ON public.expenses;
CREATE POLICY "Customers can manage their own expenses"
ON public.expenses
FOR ALL
TO authenticated
USING (
  auth.uid() = user_id AND
  get_my_role() = 'customer'
)
WITH CHECK (
  auth.uid() = user_id AND
  get_my_role() = 'customer'
);
