-- Create a table for public profiles
create table if not exists public.profiles (
  id uuid not null references auth.users on delete cascade,
  updated_at timestamp with time zone,
  full_name text,
  avatar_url text,
  role text default 'customer', -- Default role
  address text,
  city text,
  state text,
  country text,
  pincode text,
  mobile_number text,

  primary key (id),
  constraint full_name_length check (char_length(full_name) >= 3)
);
-- Set up Row Level Security (RLS) for profiles
alter table public.profiles
  enable row level security;

-- Drop existing policies on profiles to ensure a clean slate
drop policy if exists "Public profiles are viewable by everyone." on public.profiles;
drop policy if exists "Users can insert their own profile." on public.profiles;
drop policy if exists "Users can update own profile." on public.profiles;

-- Create policies for profiles
create policy "Public profiles are viewable by everyone." on public.profiles
  for select using (true);

create policy "Users can insert their own profile." on public.profiles
  for insert with check (auth.uid() = id);

create policy "Users can update own profile." on public.profiles
  for update using (auth.uid() = id);

-- This trigger automatically creates a profile for new users
create or replace function public.handle_new_user()
returns trigger as $$
begin
  insert into public.profiles (id, role)
  values (new.id, new.raw_user_meta_data->>'role');
  return new;
end;
$$ language plpgsql security definer;

-- Drop existing trigger if it exists to avoid conflicts
drop trigger if exists on_auth_user_created on auth.users;

-- Create the trigger
create trigger on_auth_user_created
  after insert on auth.users
  for each row execute procedure public.handle_new_user();

-- Create expenses table
create table if not exists public.expenses (
    id bigint generated by default as identity primary key,
    user_id uuid references auth.users not null,
    item_name text not null,
    amount numeric(10, 2) not null,
    expense_date date not null,
    created_at timestamp with time zone default timezone('utc'::text, now()) not null
);

-- Secure expenses table with RLS
alter table public.expenses enable row level security;

-- Drop all old/incorrect policies on expenses table
drop policy if exists "Users can manage their own expenses if they are a customer." on public.expenses;
drop policy if exists "Customers can view their own expenses." on public.expenses;
drop policy if exists "Customers can insert their own expenses." on public.expenses;
drop policy if exists "Customers can delete their own expenses." on public.expenses;
drop policy if exists "Customer can view their own expenses" on public.expenses;
drop policy if exists "Customer can insert their own expenses" on public.expenses;
drop policy if exists "Customer can delete their own expenses" on public.expenses;

-- CORRECT Policies for expenses table using EXISTS on profiles table
create policy "Customers can view their own expenses." on public.expenses
  for select
  using (
    (auth.uid() = user_id) AND
    (
      EXISTS (
        SELECT 1
        FROM public.profiles
        WHERE ((profiles.id = expenses.user_id) AND (profiles.role = 'customer'::text))
      )
    )
  );

create policy "Customers can insert their own expenses." on public.expenses
  for insert
  with check (
    (auth.uid() = user_id) AND
    (
      EXISTS (
        SELECT 1
        FROM public.profiles
        WHERE ((profiles.id = auth.uid()) AND (profiles.role = 'customer'::text))
      )
    )
  );

create policy "Customers can delete their own expenses." on public.expenses
  for delete
  using (
    (auth.uid() = user_id) AND
    (
      EXISTS (
        SELECT 1
        FROM public.profiles
        WHERE ((profiles.id = expenses.user_id) AND (profiles.role = 'customer'::text))
      )
    )
  );
