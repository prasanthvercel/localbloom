-- Create a table for public profiles
create table if not exists profiles (
  id uuid references auth.users on delete cascade not null primary key,
  updated_at timestamp with time zone,
  full_name text,
  avatar_url text,
  role text,
  address text,
  city text,
  state text,
  country text,
  pincode text,
  mobile_number text
);

-- Set up Row Level Security (RLS)
alter table profiles enable row level security;

create policy "Public profiles are viewable by everyone." on profiles
  for select using (true);

create policy "Users can insert their own profile." on profiles
  for insert with check (auth.uid() = id);

create policy "Users can update own profile." on profiles
  for update using (auth.uid() = id);

-- Create expenses table
create table if not exists expenses (
    id bigint generated by default as identity primary key,
    user_id uuid references auth.users not null,
    item_name text not null,
    amount numeric(10, 2) not null,
    expense_date date not null,
    created_at timestamp with time zone default timezone('utc'::text, now()) not null
);

-- Add RLS to expenses table
alter table expenses enable row level security;

-- Policy: Users can only see their own expenses.
create policy "Users can view their own expenses" on expenses
  for select using (auth.uid() = user_id);

-- Policy: Users can only add expenses for themselves.
create policy "Users can insert their own expenses" on expenses
  for insert with check (auth.uid() = user_id);

-- Policy: Users can only delete their own expenses.
create policy "Users can delete their own expenses" on expenses
  for delete using (auth.uid() = user_id);

-- This trigger automatically creates a profile for new users.
-- This function is called when a new user signs up.
create or replace function public.handle_new_user()
returns trigger as $$
begin
  insert into public.profiles (id, role)
  values (new.id, new.raw_user_meta_data->>'role');
  return new;
end;
$$ language plpgsql security definer;

-- Trigger the function every time a user is created
drop trigger if exists on_auth_user_created on auth.users;
create trigger on_auth_user_created
  after insert on auth.users
  for each row execute procedure public.handle_new_user();

-- This trigger automatically syncs the full_name from the auth table to the profiles table
create or replace function public.update_public_profile_name()
returns trigger as $$
begin
  update public.profiles set full_name = new.raw_user_meta_data->>'full_name' where id = new.id;
  return new;
end;
$$ language plpgsql security definer;

-- Trigger the function every time a user is updated
drop trigger if exists on_auth_user_updated on auth.users;
create trigger on_auth_user_updated
  after update on auth.users
  for each row execute procedure public.update_public_profile_name();
