-- PROFILES TABLE SCHEMA
CREATE TABLE IF NOT EXISTS public.profiles (
  id uuid REFERENCES auth.users NOT NULL PRIMARY KEY,
  updated_at timestamp with time zone,
  full_name text,
  avatar_url text,
  role text,
  address text,
  city text,
  state text,
  pincode text,
  country text,
  mobile_number text
);
-- PROFILES TABLE POLICIES
-- Enable RLS
ALTER TABLE public.profiles ENABLE ROW LEVEL SECURITY;

-- Policies
CREATE POLICY "Authenticated users can view profiles." ON public.profiles
  FOR SELECT USING (auth.role() = 'authenticated');

CREATE POLICY "Users can insert their own profile." ON public.profiles
  FOR INSERT WITH CHECK (auth.uid() = id);

CREATE POLICY "Users can update their own profile." ON public.profiles
  FOR UPDATE USING (auth.uid() = id);

  -- EXPENSES TABLE SCHEMA
CREATE TABLE IF NOT EXISTS public.expenses (
  id bigint GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  user_id uuid REFERENCES public.profiles NOT NULL,
  item_name text NOT NULL,
  amount numeric(10, 2) NOT NULL,
  expense_date date NOT NULL,
  created_at timestamp with time zone DEFAULT timezone('utc'::text, now()) NOT NULL
);

-- EXPENSES TABLE POLICIES
-- Enable RLS
ALTER TABLE public.expenses ENABLE ROW LEVEL SECURITY;

-- Current policies (based on your script)
CREATE POLICY "Allow customer select on expenses" ON public.expenses
  FOR SELECT USING (
    auth.uid() = user_id AND
    public.get_user_role() = 'customer'
  );

CREATE POLICY "Allow customer insert on expenses" ON public.expenses
  FOR INSERT WITH CHECK (
    auth.uid() = user_id AND
    public.get_user_role() = 'customer'
  );

CREATE POLICY "Allow customer delete on expenses" ON public.expenses
  FOR DELETE USING (
    auth.uid() = user_id AND
    public.get_user_role() = 'customer'
  );

  -- HELPER FUNCTIONS
-- Function to handle new user creation
CREATE OR REPLACE FUNCTION public.handle_new_user()
RETURNS trigger
LANGUAGE plpgsql
SECURITY DEFINER SET search_path = public
AS $$
BEGIN
  INSERT INTO public.profiles (id, role)
  VALUES (new.id, new.raw_user_meta_data->>'role');
  RETURN new;
END;
$$;

-- Trigger for new user creation
CREATE TRIGGER on_auth_user_created
  AFTER INSERT ON auth.users
  FOR EACH ROW EXECUTE PROCEDURE public.handle_new_user();

-- Function to get user role
CREATE OR REPLACE FUNCTION public.get_user_role()
RETURNS text
LANGUAGE sql
SECURITY DEFINER
SET search_path = extensions, public
AS $$
  SELECT raw_user_meta_data->>'role' FROM auth.users WHERE id = auth.uid()
$$;

-- CORRECTED HELPER FUNCTIONS
-- Improved function to handle new user creation
CREATE OR REPLACE FUNCTION public.handle_new_user()
RETURNS trigger
LANGUAGE plpgsql
SECURITY DEFINER SET search_path = public, auth
AS $$
BEGIN
  INSERT INTO public.profiles (id, role)
  VALUES (new.id, new.raw_user_meta_data->>'role');
  RETURN new;
END;
$$;

-- Safer function to get user role from profiles table
CREATE OR REPLACE FUNCTION public.get_user_role_safe()
RETURNS text
LANGUAGE sql
SECURITY INVOKER
AS $$
  SELECT role FROM public.profiles WHERE id = auth.uid()
$$;