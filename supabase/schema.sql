--
-- This script provides the complete database schema and security policies.
-- Running this script will:
-- 1. Create the 'profiles' table to store user data.
-- 2. Create the 'expenses' table for the calculator feature.
-- 3. Set up a trigger to automatically create a profile for new users.
-- 4. Apply correct Row Level Security (RLS) policies to ensure
--    users can only access their own data and that the expense
--    calculator is restricted to the 'customer' role.
--
-- To run: Copy the entire content and execute it in the Supabase SQL Editor.
--

-- 1. PROFILES TABLE
-- Create a table for public user profiles
create table if not exists public.profiles (
  id uuid not null references auth.users on delete cascade,
  updated_at timestamp with time zone,
  full_name text,
  avatar_url text,
  role text,
  address text,
  city text,
  state text,
  country text,
  pincode text,
  mobile_number text,
  primary key (id)
);

-- Set up Row Level Security (RLS)
alter table public.profiles enable row level security;

-- Clear old policies before creating new ones
drop policy if exists "Allow individual access to own profile" on public.profiles;
drop policy if exists "Allow individual updates to own profile" on public.profiles;

-- Policy: Individuals can view their own profile.
create policy "Allow individual access to own profile"
on public.profiles for select
using (auth.uid() = id);

-- Policy: Individuals can update their own profile.
create policy "Allow individual updates to own profile"
on public.profiles for update
using (auth.uid() = id);


-- 2. NEW USER TRIGGER
-- This trigger automatically creates a profile entry for each new user.
create or replace function public.handle_new_user()
returns trigger
language plpgsql
security definer set search_path = public
as $$
begin
  insert into public.profiles (id, full_name, avatar_url, role)
  values (new.id, new.raw_user_meta_data->>'full_name', new.raw_user_meta_data->>'avatar_url', new.raw_user_meta_data->>'role');
  return new;
end;
$$;

-- Drop existing trigger if it exists, to avoid errors on re-run
drop trigger if exists on_auth_user_created on auth.users;

-- Create the trigger
create trigger on_auth_user_created
  after insert on auth.users
  for each row execute procedure public.handle_new_user();


-- 3. EXPENSES TABLE
-- Create a table for user expenses
create table if not exists public.expenses (
  id bigint generated by default as identity primary key,
  user_id uuid references public.profiles on delete cascade not null,
  item_name text not null,
  amount numeric not null,
  expense_date date not null,
  created_at timestamp with time zone default timezone('utc'::text, now()) not null
);

-- Enable Row Level Security for the expenses table
alter table public.expenses enable row level security;


-- 4. EXPENSES POLICIES
-- Clean up old policies before creating new ones to ensure a fresh start.
drop policy if exists "Allow customers to view their own expenses" on public.expenses;
drop policy if exists "Allow customers to insert their own expenses" on public.expenses;
drop policy if exists "Allow customers to delete their own expenses" on public.expenses;
drop policy if exists "Allow customers to update their own expenses" on public.expenses;


-- New, correct policies for the expenses table.

-- Policy: Allow CUSTOMER role to view their own expenses.
create policy "Allow customers to view their own expenses"
on public.expenses for select
using (
  auth.uid() = user_id and
  exists (
    select 1
    from public.profiles
    where id = auth.uid() and role = 'customer'
  )
);

-- Policy: Allow CUSTOMER role to insert their own expenses.
create policy "Allow customers to insert their own expenses"
on public.expenses for insert
with check (
  auth.uid() = user_id and
  exists (
    select 1
    from public.profiles
    where id = auth.uid() and role = 'customer'
  )
);

-- Policy: Allow CUSTOMER role to delete their own expenses.
create policy "Allow customers to delete their own expenses"
on public.expenses for delete
using (
  auth.uid() = user_id and
  exists (
    select 1
    from public.profiles
    where id = auth.uid() and role = 'customer'
  )
);

-- Policy: Allow CUSTOMER role to update their own expenses.
create policy "Allow customers to update their own expenses"
on public.expenses for update
using (
  auth.uid() = user_id and
  exists (
    select 1
    from public.profiles
    where id = auth.uid() and role = 'customer'
  )
);


-- 5. GRANT PERMISSIONS
-- Grant all permissions to the authenticated role for the tables.
-- The RLS policies created above will handle the actual security.
grant all on table public.profiles to authenticated;
grant all on table public.expenses to authenticated;
