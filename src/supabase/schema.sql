--
-- This script contains the complete and corrected database schema and security rules.
-- RUN THIS ENTIRE SCRIPT IN YOUR SUPABASE SQL EDITOR TO FIX PERMISSION ISSUES.
--

-- Drop existing policies and functions to ensure a clean setup.
drop policy if exists "Authenticated users can view profiles." on public.profiles;
drop policy if exists "Users can insert their own profile." on public.profiles;
drop policy if exists "Users can update their own profile." on public.profiles;
drop policy if exists "Allow customer access on their own expenses" on public.expenses;
drop policy if exists "Allow customer select on expenses" on public.expenses;
drop policy if exists "Allow customer insert on expenses" on public.expenses;
drop policy if exists "Allow customer delete on expenses" on public.expenses;
drop trigger if exists on_auth_user_created on auth.users;
drop function if exists public.handle_new_user();
drop function if exists public.get_user_role();


-- 1. PROFILES TABLE
-- Stores public user data.
create table if not exists public.profiles (
  id uuid references auth.users not null primary key,
  updated_at timestamp with time zone,
  full_name text,
  avatar_url text,
  role text,
  address text,
  city text,
  state text,
  pincode text,
  country text,
  mobile_number text
);

-- 2. PROFILES ROW LEVEL SECURITY (RLS)
alter table public.profiles enable row level security;

create policy "Authenticated users can view profiles." on public.profiles
  for select using (auth.role() = 'authenticated');

create policy "Users can insert their own profile." on public.profiles
  for insert with check (auth.uid() = id);

create policy "Users can update their own profile." on public.profiles
  for update using (auth.uid() = id);


-- 3. NEW USER TRIGGER
-- This trigger automatically creates a profile for new users.
create or replace function public.handle_new_user()
returns trigger
language plpgsql
security definer set search_path = public
as $$
begin
  insert into public.profiles (id, role)
  values (new.id, new.raw_user_meta_data->>'role');
  return new;
end;
$$;

-- Trigger the function after a new user signs up
create trigger on_auth_user_created
  after insert on auth.users
  for each row execute procedure public.handle_new_user();


-- 4. EXPENSES TABLE
-- Stores expense data for users.
create table if not exists public.expenses (
  id bigint generated by default as identity primary key,
  user_id uuid references public.profiles not null,
  item_name text not null,
  amount numeric(10, 2) not null,
  expense_date date not null,
  created_at timestamp with time zone default timezone('utc'::text, now()) not null
);


-- 5. SECURE HELPER FUNCTION
-- Securely gets the current user's role from their metadata.
-- This function runs with elevated privileges to safely access the auth.users table.
create or replace function public.get_user_role()
returns text
language sql
security definer
set search_path = extensions, public
as $$
  select raw_user_meta_data->>'role' from auth.users where id = auth.uid()
$$;


-- 6. EXPENSES ROW LEVEL SECURITY (RLS)
alter table public.expenses enable row level security;

create policy "Allow customer select on expenses" on public.expenses
  for select using (
    auth.uid() = user_id and
    public.get_user_role() = 'customer'
  );

create policy "Allow customer insert on expenses" on public.expenses
  for insert with check (
    auth.uid() = user_id and
    public.get_user_role() = 'customer'
  );

create policy "Allow customer delete on expenses" on public.expenses
  for delete using (
    auth.uid() = user_id and
    public.get_user_role() = 'customer'
  );
